-- Sistem de pontare

-- Tabel pentru angajati
CREATE TABLE employees (
    employee_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,        -- PK
    full_name       VARCHAR2(100) NOT NULL,                                     -- constrangere de tip NOT NULL
    email           VARCHAR2(100) NOT NULL UNIQUE,                              -- constrangere de tip UNIQUE
    hire_date       DATE DEFAULT SYSDATE,                                       -- constrangere de tip DEFAULT 
    profile_data    CLOB                                                        -- coloana care contine date semistructurate JSON
        CONSTRAINT chk_employees_profile_json CHECK (profile_data IS JSON)      -- constrangere de tip CHECK pentru JSON
);

-- Index la campul hire_date (index non-PK/FK)
CREATE INDEX idx_employees_hire_date ON employees(hire_date);

-- Tabel pentru proiecte
CREATE TABLE projects (
    project_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_name    VARCHAR2(100) NOT NULL UNIQUE,                              -- constrangeri de tip NOT NULL si UNIQUE
    start_date      DATE NOT NULL,
    end_date        DATE,
    CONSTRAINT chk_proj_dates CHECK (end_date IS NULL OR end_date >= start_date)-- constrangere de tip CHECK
);

-- Index la campul start_date
CREATE INDEX idx_projects_start_date ON projects(start_date);

-- Tabel pentru timesheets
CREATE TABLE timesheets (
    sheet_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,        -- PK
    employee_id     NUMBER NOT NULL,                                            -- FK
    sheet_date      DATE DEFAULT TRUNC(SYSDATE),                                -- constrangere de tip DEFAULT
    status          VARCHAR2(20) DEFAULT 'OPEN' NOT NULL,                       -- constrangeri de tip DEFAULT si NOT NULL
    CONSTRAINT fk_timesheets_emp FOREIGN KEY (employee_id)
        REFERENCES employees(employee_id)
        ON DELETE CASCADE,                                                
    CONSTRAINT chk_timesheets_status CHECK (status IN ('OPEN','SUBMITTED','APPROVED','REJECTED'))-- constrangere de tip CHECK
);

-- Index la campul pentru data de la timesheet
CREATE INDEX idx_timesheets_date ON timesheets(sheet_date);

-- Tabel pentru pontarile din timesheets
CREATE TABLE timesheet_entries (
    entry_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sheet_id        NUMBER NOT NULL,
    project_id      NUMBER NOT NULL,
    entry_date      DATE NOT NULL,
    hours_logged    NUMBER(5,2) DEFAULT 0 NOT NULL,
    details         CLOB
        CONSTRAINT chk_entries_details_json CHECK (details IS JSON),
    CONSTRAINT fk_entries_sheet FOREIGN KEY (sheet_id)
        REFERENCES timesheets(sheet_id),
    CONSTRAINT fk_entries_project FOREIGN KEY (project_id)
        REFERENCES projects(project_id),
    CONSTRAINT chk_hours_range CHECK (hours_logged > 0 AND hours_logged <= 24)
);

-- Index la campul datei pontarii
CREATE INDEX idx_entries_date ON timesheet_entries(entry_date);


-- View: Lista de timesheets cu informatiile angajatului
CREATE OR REPLACE VIEW vw_employee_timesheets AS
SELECT
    e.employee_id,
    e.full_name,
    t.sheet_id,
    t.sheet_date,
    t.status
FROM employees e
JOIN timesheets t ON e.employee_id = t.employee_id
;

-- Materialized View: Sumarizare zilnica a orelor fiecarui angajat
CREATE MATERIALIZED VIEW mv_daily_hours_summary
BUILD IMMEDIATE
REFRESH COMPLETE START WITH SYSDATE NEXT SYSDATE + 1
AS
SELECT
    e.employee_id,
    e.full_name,
    te.entry_date,
    SUM(te.hours_logged) AS total_hours
FROM employees e
JOIN timesheets t ON e.employee_id = t.employee_id
JOIN timesheet_entries te ON t.sheet_id = te.sheet_id
GROUP BY
    e.employee_id,
    e.full_name,
    te.entry_date
;

-- Group By: Orele totale ale unui angajat
-- Interogarea insumeaza orele pontate de fiecare angajat
SELECT
    e.employee_id,
    e.full_name,
    SUM(te.hours_logged) AS total_hours
FROM employees e
JOIN timesheet_entries te ON e.employee_id = te.sheet_id
GROUP BY
    e.employee_id,
    e.full_name
;

-- Left Join: Lista tuturor angajatilor si a pontarilor acestora
-- Selectul da return la fiecare angajat impreuna cu orele pontate de acestia
-- In dreptul angajatilor care nu au pontari va aparea NULL.
SELECT
    e.employee_id,
    e.full_name,
    te.entry_date,
    te.hours_logged
FROM employees e
LEFT JOIN timesheet_entries te ON e.employee_id = te.sheet_id
ORDER BY e.employee_id, te.entry_date
;

-- Functie Analitica LAG: Pontari trecute ale fiecarui angajat
-- Acest select afiseaza fiecare pontare odata cu orele pontarii anterioare ale unui angajat
SELECT
    te.entry_id,
    te.entry_date,
    te.hours_logged,
    LAG(te.hours_logged) OVER (
        PARTITION BY t.employee_id
        ORDER BY te.entry_date
    ) AS previous_hours
FROM timesheet_entries te
JOIN timesheets t ON te.sheet_id = t.sheet_id
ORDER BY t.employee_id, te.entry_date
;
